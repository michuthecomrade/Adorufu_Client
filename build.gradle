buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'SpongePowered'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

ext.configFile = file 'project.properties'

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft_version}-${config.mod_version}"
if (hasProperty('appendBuildNumber')) {
    version = version + "-" + appendBuildNumber.toString()
}

group = "${config.group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.mod_id_cap}"

minecraft {
    version = project.forgeVersion
    runDir = 'run'
    mappings = project.mcpVersion
    coreMod = 'com.sasha.adorufu.mod.mixin.AdorufuMixinLoader'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven {
        name = 'SpongePowered'
        url = 'http://repo.spongepowered.org/maven/'
    }
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'ImpactDevelopment'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    mavenCentral()
    jcenter()
}

dependencies {
    //mixin needs to be distributed with the mod, very important
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }

    // Should only contain things that are not available from a maven server
    compile files('libs/SimpleEventSystem.jar')
    compile files('libs/SimpleCommandSystem.jar')
    compile files('libs/MultiTasker.jar')
    compile 'com.google.guava:guava:27.0-jre'
    compile 'club.minnced:java-discord-rpc:2.0.1'
    compile 'club.minnced:discord-rpc-release:v3.3.0'
    compile 'com.github.EmotionalLove:SimpleSettingSystem:e2aaa43f25'
    compile 'com.github.cabaletta:baritone:v1.0.0-hotfix-2'
    compile 'cabaletta:baritone-api:1.0.0'
    compile 'net.jodah:typetools:0.5.0'
    compile 'org.yaml:snakeyaml:1.19'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    // move _at.cfg into META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, 'mixins.adorufu.refmap.json'
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task shadowDevJar(type: ShadowJar) {
    classifier = 'dev-shaded'

    from sourceSets.main.output
    //from sourceSets.java8.output

    // Default settings for shadow tasks
    configurations = [project.configurations.runtime]
    manifest.inheritFrom tasks.jar.manifest
    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

//shadowDevJar shadowConfiguration

// Upload shadowDevJar to Maven repository
artifacts {
    archives shadowDevJar
}

allprojects {
    // Re-obfuscate only after creating the shadowDevJar
    tasks.findByName('reobfJar')?.mustRunAfter rootProject.tasks.shadowDevJar
}

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('net.jodah:typetools'))
        include(dependency('org.yaml:snakeyaml'))
        include(dependency('club.minnced:java-discord-rpc'))
        include(dependency('com.github.EmotionalLove:SimpleSettingSystem'))
        include(dependency('club.minnced:java-discord-rpc:2.0.1'))
        include(dependency('club.minnced:discord-rpc-release:v3.3.0'))
        include(dependency('com.google.guava:guava:27.0-jre'))
        include(dependency(group: 'cabaletta', name: 'baritone-api', version: '1.0.0'))
    }
    exclude 'dummyThing'
    exclude 'LICENSE.txt'
    classifier = 'full'
}

build.dependsOn(shadowJar)

jar {
    manifest {
        attributes(
                "MixinConfigs": 'mixins.adorufu.json',
                "tweakClass": 'org.spongepowered.asm.launch.MixinTweaker',
                "TweakOrder": 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'com.sasha.adorufu.mod.mixin.AdorufuMixinLoader',
                'ForceLoadAsMod': 'true',
                'FMLAT': 'adorufu_at.cfg'
        )
    }
}
sourceCompatibility = targetCompatibility = '1.8'